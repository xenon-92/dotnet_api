name: CI pipeline

on:
  push:
    branches:
      - 'feature/**'
      - 'main'
env:
  DOCKER_IMAGE_NAME: 'dotnet_sdk_checker'
  GHCR_IMAGE_NAME: 'test_github_ci'

jobs:
  sayHello:
    runs-on: 'ubuntu-latest'

    steps:
      - name: bash to compute
        run: |
          echo "just saying hi"
          ls -la > ./rough
          cat ./rough
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: build solution
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
  docker_build_and_push:
    runs-on: 'ubuntu-latest'
    needs: build
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: get docker tag
        id: time
        run: echo "TAG=$(date +'%y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: echo the docker image name
        run: echo 'docker image --> ${{ env.DOCKER_IMAGE_NAME }}'
      - name: build docker image
        run: |
          echo 'building docker image ....'
          docker build -t ${{secrets.DOCKER_USERNAME}}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }} .
      - name: docker push image
        run: |
          echo 'pushing to docker hub'
          docker push ${{secrets.DOCKER_USERNAME}}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}
  GHCR_build_and_push:
    runs-on: 'ubuntu-latest'
    needs: build
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: login to GHCR
        run: |
          docker login --username xenon-92 --password ${{secrets.GHCR_PAT_X}} ghcr.io
      - name: get docker tag
        id: time
        run: echo "TAG=$(date +'%y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: echo the docker image name
        run: echo 'docker image --> ${{ env.DOCKER_IMAGE_NAME }}'
      - name: build GHCR image
        run: |
          docker build -t ghcr.io/xenon-92/${{ env.GHCR_IMAGE_NAME }}:${{ env.TAG }} .
          docker push ghcr.io/xenon-92/${{ env.GHCR_IMAGE_NAME }}:${{ env.TAG }}
      - name: push GHCR image
        run: |
          docker push ghcr.io/xenon-92/${{ env.GHCR_IMAGE_NAME }}:${{ env.TAG }}
  Generate_SDK_and_Github_Publish:
    runs-on: 'ubuntu-latest'
    needs: [GHCR_build_and_push, docker_build_and_push]
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: build solution
        run: dotnet build --no-restore
      - name: Install OpenAPI Generator
        run: npm install @openapitools/openapi-generator-cli -g
        id: generate_sdk
      - name: Generate SDK from OpenAPI Spec
        run: openapi-generator-cli generate -i ./openapi.yaml -g csharp -o ./generated-sdk
      - run: ls -la ./generated-sdk
      - name: Publish to GitHub Packages
        run: |
          dotnet pack ./generated-sdk
          dotnet nuget add source --username xenon-92 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/xenon-92/index.json"
          dotnet nuget push ./generated-sdk/bin/Debug/*.nupkg --source "github"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}